# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  workflow_call:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      minors: ${{ steps.set-minors.outputs.minors }}
      latest: ${{ steps.set-minors.outputs.latest }}
    steps:
      - name: Fetch all tags
        run: |
          git clone --quiet --depth 1 --no-checkout --filter=blob:none https://github.com/${{ github.repository }} repo
          cd repo
          git fetch --tags
          git tag > ../tags.txt
      - name: Extract unique minor tags and latest
        id: set-minors
        run: |
          # Extract tags like v1.2.3, v2.3.4, etc.
          grep -E '^v[0-9]+\.[0-9]+' tags.txt | \
          sed -E 's/^(v[0-9]+\.[0-9]+).*/\1/' | \
          sort -u > minors.txt
          minors_json=$(jq -R . < minors.txt | jq -s .)
          echo "minors=$minors_json" >> "$GITHUB_OUTPUT"
          # Find the latest minor (sort -V for version sort, tail -1 for latest)
          latest=$(sort -V minors.txt | tail -1)
          echo "latest=$latest" >> "$GITHUB_OUTPUT"
      - name: Show minors and latest
        run: |
          cat minors.txt
          echo "Latest minor: $(sort -V minors.txt | tail -1)"

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: define-matrix
    strategy:
      matrix:
        minor: ${{ fromJSON(needs.define-matrix.outputs.minors) }}
    steps:
      - name: Checkout main repo and submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Checkout pelican submodule at tag
        run: |
          cd pelican
          git fetch --tags
          git checkout ${{ matrix.minor }}
          cd ../

      - name: Cache built site
        id: cache-site
        uses: actions/cache@v4
        with:
          path: ./${{ matrix.minor }}
          key: pelican-doc-site-${{ matrix.minor }}

      - name: Go-Generate (build site) if cache miss
        if: steps.cache-site.outputs.cache-hit != 'true'
        run: |
          export BASE_PATH="/${{ matrix.minor }}"
          cd pelican
          make generate USE_DOCKER=1
          echo "Copying the pelican site to the /public folder"
          mkdir -p ../public/static
          cp docs/parameters.json ../public/static/parameters.json
          cd ../
          # Build with Next.js
          npm ci
          npm run build
          # Move the output to a versioned directory
          cp -r out ./${{ matrix.minor }}

      - name: Upload versioned site artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ matrix.minor }}
          path: ./${{ matrix.minor }}

  # Aggregate built sites
  aggregate-sites:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all site artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: docs-*

      - name: List all aggregated sites
        run: ls -l

      - name: Update latest
        run: cp -r ${{ needs.define-matrix.outputs.latest }} .

      - name: Upload aggregate artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        run: echo "I would deploy here"
        # uses: actions/deploy-pages@v4
